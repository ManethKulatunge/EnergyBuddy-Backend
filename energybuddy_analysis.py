# -*- coding: utf-8 -*-
"""ConUHacks

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q3n00wNENUtGeTd3PNnRN-eScy5rSZ17
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from google.colab import files

uploaded = files.upload()

cities = ['Vancouver', 'Portland', 'San Francisco', 'Seattle',
       'Los Angeles', 'San Diego', 'Las Vegas', 'Phoenix', 'Albuquerque',
       'Denver', 'San Antonio', 'Dallas', 'Houston', 'Kansas City',
       'Minneapolis', 'Saint Louis', 'Chicago', 'Nashville', 'Indianapolis',
       'Atlanta', 'Detroit', 'Jacksonville', 'Charlotte', 'Miami',
       'Pittsburgh', 'Toronto', 'Philadelphia', 'New York', 'Montreal',
       'Boston']

weather_description_df = pd.read_csv("weather_description.csv")
file_read = file_read.drop(columns=['datetime', 'Beersheba', 'Tel Aviv District', 'Eilat', 'Haifa','Nahariyya', 'Jerusalem'])

solar_desc_index = {'mist':3, 'sky is clear':10, 'few clouds':8, 'overcast clouds':5,
 'scattered clouds':6, 'broken clouds':5, 'light intensity drizzle':0, 'light rain':0,
 'fog':4, 'haze':5, 'heavy snow':0, 'dust':7, 'proximity thunderstorm':0,
 'thunderstorm with rain':0, 'thunderstorm':0, 'thunderstorm with heavy rain':0,
 'heavy intensity rain':0, 'moderate rain':0, 'drizzle':0,
 'heavy intensity drizzle':0, 'thunderstorm with light rain':0,
 'proximity thunderstorm with rain':0, 'thunderstorm with heavy drizzle':0,
 'very heavy rain':0, 'smoke':5, 'light snow':0, 'snow':0, 'squalls':8,
 'thunderstorm with light drizzle':0, 'tornado':3, 'thunderstorm with drizzle':0,
 'proximity shower rain':0}

np.unique(weather_description_df[['Vancouver', 'Portland', 'San Francisco', 'Seattle',
       'Los Angeles', 'San Diego', 'Las Vegas', 'Phoenix', 'Albuquerque',
       'Denver', 'San Antonio', 'Dallas', 'Houston', 'Kansas City',
       'Minneapolis', 'Saint Louis', 'Chicago', 'Nashville', 'Indianapolis',
       'Atlanta', 'Detroit', 'Jacksonville', 'Charlotte', 'Miami',
       'Pittsburgh', 'Toronto', 'Philadelphia', 'New York', 'Montreal',
       'Boston']].values)

#from functools import reduce
#for i in range(1,29):
set(weather_description_df.iloc[:,1]).union(set(weather_description_df.iloc[2]))

city_attributes_df = pd.read_csv("city_attributes.csv")
city_attributes_df["City"].unique()

wind_speed_df = pd.read_csv("wind_speed.csv")

wind_speed_df["Toronto"].unique()

"""# More stuff"""

import pandas as pd
import os, math
import numpy as np 
import matplotlib.pyplot as plt 
import sklearn
from sklearn.cluster import KMeans

file_read = pd.read_csv('weather_description.csv')
file_read = file_read.drop(columns=['datetime', 'Beersheba', 'Tel Aviv District', 'Eilat', 'Haifa','Nahariyya', 'Jerusalem'])
#print(file_read.columns, file_read.shape)
#print(file_read.head(5))
 
file_read = file_read.dropna(0)

cities = ['Vancouver', 'Portland', 'San Francisco', 'Seattle',
       'Los Angeles', 'San Diego', 'Las Vegas', 'Phoenix', 'Albuquerque',
       'Denver', 'San Antonio', 'Dallas', 'Houston', 'Kansas City',
       'Minneapolis', 'Saint Louis', 'Chicago', 'Nashville', 'Indianapolis',
       'Atlanta', 'Detroit', 'Jacksonville', 'Charlotte', 'Miami',
       'Pittsburgh', 'Toronto', 'Philadelphia', 'New York', 'Montreal',
       'Boston']

# dictionary containing reindexing for data
solar_desc_index = {'proximity sand/dust whirls':5,
 'few clouds':8,
 'snow':0,
 'mist':3,
 'sand':6,
 'proximity shower rain':0,
 'light shower snow':0,
 'heavy intensity drizzle':0,
 'proximity thunderstorm with rain':0,
 'fog':4,
 'heavy intensity rain':0,
 'shower snow':0,
 'ragged thunderstorm':0,
 'freezing rain':0,
 'thunderstorm with drizzle':0,
 'thunderstorm with heavy rain':0,
 'thunderstorm with light drizzle':0,
 'light intensity drizzle rain':0,
 'light intensity drizzle':0,
 'proximity moderate rain':0,
 'shower rain':0,
 'dust':6,
 'proximity thunderstorm':0,
 'heavy thunderstorm':0,
 'thunderstorm with heavy drizzle':0,
 'heavy intensity shower rain':0,
 'rain and snow':0,
 'scattered clouds':6,
 'smoke':4,
 'light rain':0,
 'thunderstorm with light rain':0,
 'haze':5,
 'proximity thunderstorm with drizzle':0,
 'heavy snow':0,
 'thunderstorm with rain':0,
 'sand/dust whirls':6,
 'overcast clouds':4,
 'sleet':0,
 'broken clouds':6,
 'light shower sleet':0,
 'squalls':7,
 'moderate rain':0,
 'light intensity shower rain':0,
 'thunderstorm':0, 
 'volcanic ash':0,
 'tornado':1,
 'drizzle':0,
 'heavy shower snow':0,
 'very heavy rain':0,
 'shower drizzle':0,
 'sky is clear':10,
 'light rain and snow':0,
 'light snow':0}

file_read = file_read.replace(solar_desc_index)

file_read = file_read.mean(axis=0)
file_read = pd.DataFrame({'City':file_read.index, 'Sunlight':file_read.values})
print("file_read \n", file_read)

print(len(solar_desc_index))
#from functools import reduce
#tmp = file_read.iloc[:,0]
#set(weather_description_df.iloc[:,1]).union(set(weather_description_df.iloc[2]))
#for i in range(1,29):
#  set(tmp).union(set(file_read.iloc[i+1]))

my_list = []

#print(file_read.iloc[:,2].tolist())

for i in range(0,30):
  #print(len(file_read.iloc[:,i].tolist()))
  my_list += file_read.iloc[:,i].tolist()
  #print(len(my_list))

'''
for f in file_read.columns():
  print(f)
  vc = file_read[columns='f'].unique().tolist()
  print(vc)
'''


print(len(set(my_list)))
#  set(tmp).union(set(file_read.iloc[i+1]))
print(set(my_list))



file2_read = pd.read_csv('temperature.csv')
file2_read = file2_read.drop(columns=['datetime', 'Beersheba', 'Tel Aviv District', 'Eilat', 'Haifa','Nahariyya', 'Jerusalem'])
file2_read = file2_read.dropna(axis=0)
file2_read = file2_read.apply(lambda x: x - 273.15)
file2_read = file2_read.mean(axis=0)
file2_read = pd.DataFrame({'City':file2_read.index, 'Temperature':file2_read.values})

#file2_read.columns = ["City", "Temperature"]
print("file2_read", file2_read)

file3_read = pd.read_csv('wind_speed.csv')
file3_read = file3_read.drop(columns=['datetime','Beersheba', 'Tel Aviv District', 'Eilat', 'Haifa','Nahariyya', 'Jerusalem'])
file3_read = file3_read.dropna(axis=0)
file3_read = file3_read.mean(axis=0)
file3_read = pd.DataFrame({'City':file3_read.index, 'Wind_Speed':file3_read.values})

#file3_read.columns = ["City", "Wind_Speed"]
print("file3_read", file3_read)

from functools import reduce
dfs = [file2_read, file3_read]


cleaned_weather_data = reduce(lambda left,right: pd.merge(left,right,on=["City"]), dfs)
print(cleaned_weather_data)

# we load our  concatenate and prepared data
#input_data = np.asarray()
#clusters = KMeans(n_clusters=2, init=’k-means++’, max_iter=500, tol=0.0001).fit(input_data)

#we visualize the data and outputed clusters

X = cleaned_weather_data.iloc[:,1:]

plt.scatter(X["Temperature"], X["Wind_Speed"], label='True Position')

from sklearn.cluster import KMeans

kmeans = KMeans(n_clusters=2)
kmeans.fit(X)

print(kmeans.cluster_centers_) 
print(kmeans.labels_)  
plt.scatter(X["Temperature"], X["Wind_Speed"], c=kmeans.labels_, cmap='rainbow')  
plt.scatter(kmeans.cluster_centers_[:,0] ,kmeans.cluster_centers_[:,1], color='black')

kmeans3 = KMeans(n_clusters=3)
kmeans3.fit(X)

print(kmeans3.cluster_centers_) 
print(kmeans3.labels_)  
plt.scatter(X["Temperature"], X["Wind_Speed"], c=kmeans3.labels_, cmap='rainbow')  
plt.scatter(kmeans3.cluster_centers_[:,0] ,kmeans3.cluster_centers_[:,1], color='black')

kmeans3 = KMeans(n_clusters=4)
kmeans3.fit(X)

print(kmeans3.cluster_centers_) 
print(kmeans3.labels_)  

plt.scatter(X["Temperature"], X["Wind_Speed"], c=kmeans3.labels_, cmap='rainbow')  
plt.scatter(kmeans3.cluster_centers_[:,0] ,kmeans3.cluster_centers_[:,1], color='black')

from sklearn.model_selection import train_test_split

input_data = cleaned_weather_data.iloc[:,1:]

train_set, test_set = train_test_split(input_data,train_size=0.8, test_size=0.2)

# we load our  concatenate and prepared data
clusters = KMeans(n_clusters=2, init='k-means++', max_iter=500, tol=0.0001).fit(train_set)

clusters.fit(input_data)

print(clusters.cluster_centers_) 
print(clusters.labels_)  

plt.scatter(input_data["Temperature"], input_data["Wind_Speed"], c=clusters.labels_, cmap='rainbow')  
plt.scatter(clusters.cluster_centers_[:,0] ,clusters.cluster_centers_[:,1], color='black')

from functools import reduce
dfs = [file_read, file2_read, file3_read]
print()


cleaned_weather_data_all = reduce(lambda left,right: pd.merge(left,right,on=["City"]), dfs)
print(cleaned_weather_data)

from sklearn.model_selection import train_test_split

input_data = cleaned_weather_data_all.iloc[:,1:]

train_set, test_set = train_test_split(input_data,train_size=0.8, test_size=0.2)

# we load our  concatenate and prepared data
clusters = KMeans(n_clusters=2, init='k-means++', max_iter=500, tol=0.0001).fit(train_set)
cl = clusters.predict(test_set)
print(cl, test_set)

print(clusters.cluster_centers_) 
print(clusters.labels_)  

plt.scatter(train_set["Temperature"], train_set["Wind_Speed"], c=clusters.labels_, cmap='rainbow')  
plt.scatter(clusters.cluster_centers_[:,0], clusters.cluster_centers_[:,1], color='black')

from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt



fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')


ax.scatter(train_set["Temperature"], train_set["Wind_Speed"], train_set["Sunlight"], c=clusters.labels_, cmap='rainbow')
ax.scatter(clusters.cluster_centers_[:,0] ,clusters.cluster_centers_[:,1], clusters.cluster_centers_[:,2], color='black')
ax.set_xlabel('Temperature')
ax.set_ylabel('Wind Speed')
ax.set_zlabel('Sunlight')

plt.show()

print(clusters.labels_)
print(train_set)

print()

print(cl)
print(test_set)

# 0 is for good solar energy
# 1 is for good wind turbine energy

train_set["Result"] = clusters.labels_
print(train_set)

print()

test_set["Result"] = cl
print(test_set)

final_table = pd.concat([train_set, test_set], ignore_index=False)
#print(final_table)

final_table.sort_index(inplace = True)

# 0 is for good solar energy
# 1 is for good wind turbine energy
final_table["Result"] = final_table["Result"].replace({0:"Solar", 1:"Wind"})
print(final_table)

final_table["City"] = cleaned_weather_data_all["City"]
print(final_table)

final_table